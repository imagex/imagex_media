<?php
/**
 * @file
 */

/**
 * Implements hook_install().
 */
function imagex_media_install() {
  foreach (imagex_media_default_variables() as $variable => $default_value) {
    variable_set($variable, $default_value);
  }
  _imagex_media_enable_media_folders();
}

/**
 * Implements hook_uninstall().
 */
function imagex_media_uninstall() {
  foreach (imagex_media_default_variables() as $variable => $default_value) {
    variable_del($variable);
  }
}

/**
 * Implements hook_enable().
 */
function imagex_media_enable() {
  // @TODO: Should be move the installation routines here?
}

/**
 * Implements hook_disable().
 */
function imagex_media_disable() {
  /* if (variable_get('imagex_media_media_folder_delete_on_disable', FALSE)) {
    // @TODO: Handle delete of media folders.
  } */
}

/**
 * Implements hook_imagex_variables().
 *
 * @return array
 *   Returns a variable name keyed array with default values.
 */
function imagex_media_imagex_variables() {
  return array(
    'imagex_media_media_folder_delete_on_disable' => FALSE,
    'image_jpeg_quality' => 95,
    'media_wysiwyg_wysiwyg_browser_plugins' => array(
      'upload',
      'media_browser_plus--media_browser_thumbnails',
      'media_browser_plus--media_browser_my_files',
      'media_internet'
    ),
    'media_wysiwyg_wysiwyg_allowed_types' => array(
      'image',
      'video',
      'audio',
      'document'
    ),
    'mediaelement_sitewide' => 1,
  );
}

/**
 * Creates the media folder vocabulary and each folder's term.
 */
function _imagex_media_enable_media_folders() {
  // Attempt to load the media folders vocabulary. If it does not exist,
  // let's go ahead and create it.
  $media_folders_vocabulary = imagex_media_get_media_folders_vocabulary();
  if (FALSE === $media_folders_vocabulary) {
    $media_folders_vocabulary_definition = (object) _imagex_media_get_media_folder_vocabulary_definition();
    taxonomy_vocabulary_save($media_folders_vocabulary_definition);
    unset($media_folders_vocabulary_definition);

    $media_folders_vocabulary = imagex_media_get_media_folders_vocabulary();
    // Should the vocabulary save fail, throw an exception because we
    // cannot continue with configuration and setup.
    if (!$media_folders_vocabulary) {
      throw new ImagexException(t('Unable to create and load the media folders vocabulary.'));
    }
  }

  // Create the media folder root term, save it and let's move on.
  // @TODO: Look and determine if we should perform a lookup first.
  $media_folder_root = (object) array(
    'name' => t('Media Root'),
    'description' => t('The root media folder which acts as the default.'),
    'vid' => $media_folders_vocabulary->vid,
    'weight' => '-10',
    'parent' => 0,
  );
  taxonomy_term_save($media_folder_root);
  variable_set('media_browser_plus_root_folder_tid', $media_folder_root->tid);

  foreach (_imagex_media_get_media_folder_child_term_definition($media_folders_vocabulary->vid) as $media_folder) {
    $media_folder = (object) $media_folder;
    $media_folder->parent = $media_folder_root->tid;
    _imagex_media_create_media_folder((object) $media_folder);
  }

  // Enable the media_browser_plus module. While a dependency, we cannot add it
  // as an explicit dependency within the .info file to avoid errors during
  // installation about media folders and root.
  module_enable(array('media_browser_plus'));
}

/**
 * @param $media_folder
 */
function _imagex_media_create_media_folder($media_folder) {
  $children = array();
  if (!empty($media_folder->children)) {
    $children = $media_folder->children;
    unset($media_folder->children);
  }

  taxonomy_term_save($media_folder);

  foreach ($children as $child) {
    $child = (object) $child;
    $child->vid = $media_folder->vid;
    $child->parent = $media_folder->tid;
    _imagex_media_create_media_folder($media_folder);
  }
}

/**
 * Returns an array representation of the media folders vocabulary.
 *
 * @return array
 *   Returns an associative array that mocks the vocabulary for creation.
 */
function _imagex_media_get_media_folder_vocabulary_definition() {
  return array(
    'name' => t('Media Folders'),
    'description' => t('The media folders vocabulary allows for the organization of media data.'),
    'machine_name' => IMAGEX_MEDIA_MEDIA_FOLDER_MACHINE_NAME,
    'heirarchy' => TRUE,
    'module' => 'imagex_media',
    'weight' => '1',
  );
}

/**
 * Returns an array representation of the media folder term definitions.
 *
 * @param string $media_folder_vid
 *   The media folder vocabulary id to preset for return.
 * @return array
 *   An array of term definitions.
 */
function _imagex_media_get_media_folder_child_term_definition($media_folder_vid = '') {
    return array(
      'images' => array(
        'name' => t('Images'),
        'vid' => $media_folder_vid,
        'children' => array(
          'thumbnails' => array(
            'name' => t('Thumbnails'),
            'vid' => $media_folder_vid,
          ),
          'icons' => array(
            'name' => t('Icons'),
            'vid' => $media_folder_vid,
          ),
          'banners' => array(
            'name' => t('Banners'),
            'vid' => $media_folder_vid,
          ),
          'blocks' => array(
            'name' => t('Blocks'),
            'vid' => $media_folder_vid,
          ),
        ),
      ), // end 'images' => array(
      'documents' => array(
        'name' => t('Documents'),
        'vid' => $media_folder_vid,
        'children' => array(
          'forms' => array(
            'name' => t('Forms'),
            'vid' => $media_folder_vid,
          ),
          'pdf' => array(
            'name' => t('PDF'),
            'vid' => $media_folder_vid,
          ),
        ),
      ), // end 'documents' => array(
      'videos' => array(
        'name' => t('Videos'),
        'vid' => $media_folder_vid,
        'children' => array(
          'youtube' => array(
            'name' => t('YouTube'),
            'vid' => $media_folder_vid,
          ),
          'vimeo' => array(
            'name' => t('Vimeo'),
            'vid' => $media_folder_vid,
          ),
          'streaming' => array(
            'name' => t('Streaming'),
            'vid' => $media_folder_vid,
          ),
        ),
      ), // end 'videos' => array(
    );
}
